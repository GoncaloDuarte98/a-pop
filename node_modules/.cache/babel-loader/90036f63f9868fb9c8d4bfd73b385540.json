{"ast":null,"code":"function songReducer(state, action) {\n  // So once our action is dispatched, our reducer runs\n  // and states updated\n  switch (action.type) {\n    case \"SET_SONG\":\n      {\n        return { ...state,\n          song: action.payload.song\n        };\n      }\n\n    case \"PAUSE_SONG\":\n      {\n        return { ...state,\n          isPlaying: false\n        };\n      }\n\n    case \"PLAY_SONG\":\n      {\n        return { ...state,\n          isPlaying: true\n        };\n      }\n\n    case \"REPEAT_ON\":\n      {\n        return { ...state,\n          isRepeating: true\n        };\n      }\n\n    case \"REPEAT_OFF\":\n      {\n        return { ...state,\n          isRepeating: false\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default songReducer; //  One drawback of using reducers and something like redux, and reducers\n// which also relies on reducers, these are pure functions,\n// we can't even interact with the outside world with them,\n// So we will be using apollo tools for this, like typeDefs","map":{"version":3,"sources":["/home/goncalo/Desktop/FirstTimers/a-pop/src/reducer.js"],"names":["songReducer","state","action","type","song","payload","isPlaying","isRepeating"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC;AACA;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AAAiB;AACf,eAAO,EACL,GAAGF,KADE;AAELG,UAAAA,IAAI,EAAEF,MAAM,CAACG,OAAP,CAAeD;AAFhB,SAAP;AAID;;AACD,SAAK,YAAL;AAAmB;AACjB,eAAO,EACL,GAAGH,KADE;AAELK,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AACD,SAAK,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGL,KADE;AAELK,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AACD,SAAK,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGL,KADE;AAELM,UAAAA,WAAW,EAAE;AAFR,SAAP;AAID;;AACD,SAAK,YAAL;AAAmB;AACjB,eAAO,EACL,GAAGN,KADE;AAELM,UAAAA,WAAW,EAAE;AAFR,SAAP;AAID;;AACD;AACE,aAAON,KAAP;AAhCJ;AAkCD;;AAED,eAAeD,WAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["function songReducer(state, action) {\n  // So once our action is dispatched, our reducer runs\n  // and states updated\n  switch (action.type) {\n    case \"SET_SONG\": {\n      return {\n        ...state,\n        song: action.payload.song,\n      };\n    }\n    case \"PAUSE_SONG\": {\n      return {\n        ...state,\n        isPlaying: false,\n      };\n    }\n    case \"PLAY_SONG\": {\n      return {\n        ...state,\n        isPlaying: true,\n      };\n    }\n    case \"REPEAT_ON\": {\n      return {\n        ...state,\n        isRepeating: true,\n      };\n    }\n    case \"REPEAT_OFF\": {\n      return {\n        ...state,\n        isRepeating: false,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default songReducer;\n\n//  One drawback of using reducers and something like redux, and reducers\n// which also relies on reducers, these are pure functions,\n// we can't even interact with the outside world with them,\n// So we will be using apollo tools for this, like typeDefs\n"]},"metadata":{},"sourceType":"module"}